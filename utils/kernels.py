#!/opt/local/bin/python2.7
from __future__ import division
from sympy import *
q = symbols('q')
#f = symbols('f',cls=Function)

def getkernelinfo(w,R):
    dw  = diff(w,q)
    d2w = diff(dw,q)
    c1D = sympify(1)/(2*integrate(w,(q,0,R)))
    c2D = sympify(1)/(integrate(2*pi*q*w,(q,0,R)))
    c3D = sympify(1)/(integrate(4*pi*q*q*w,(q,0,R)))
    return (dw, d2w, c1D, c2D, c3D)

def printkernel(w,R):
    dw, d2w, c1D, c2D, c3D = getkernelinfo(w,R)
    print "\nW:"
    print w
    print "\nFirst derivative:"
    print dw
    print "\n2nd derivative:"
    print d2w
    print "\n1D normalisation:"
    print c1D
    print "\n2D normalisation:"
    print c2D
    print "\n3D normalisation:"
    print c3D

# utility to format output of real numbers correctly for Fortran floating point
def fmt(e):
    import re
    g = "%s" %e
    s = re.sub("((?!\*\*\d+)\D\D\d+)|(^\d+)|((?!\*\d+)\D\d+)","\g<0>.", g)
    return s


def printkernel_ndspmhd(w,R,name):
    dw, d2w, c1D, c2D, c3D = getkernelinfo(w,R)
    print "!"
    print "!--%s (auto-generated by kernels.py)" %name
    print "!"
    print "    kernellabel = '%s' \n" %name
    print "    radkern = %.1f" %(R)
    print "    radkern2 = radkern*radkern"
    print "    dq2table = radkern2/real(ikern)"
    print "    select case(ndim)"
    print "      case(1)"
    print "         cnormk = %s" %fmt(c1D)
    print "      case(2)"
    print "         cnormk = %s" %fmt(c2D)
    print "      case(3)"
    print "         cnormk = %s" %fmt(c3D)
    print "    end select"
    print "    do i=0,ikern"
    print "       q2 = i*dq2table"
    print "       q = sqrt(q2)"
    if isinstance(w, Piecewise):
       for i, (e, c) in enumerate(w.args):
           (de, dc) = dw.args[i]
           (d2e, d2c) = d2w.args[i]
           if i == 0:
              print "       if (%s) then" %fmt(c)
           elif i == len(w.args)-1 and c == True:
              print "       else"
           else:
              print "       elseif (%s) then" %fmt(c)
           print "          wkern(i) = %s " %fmt(e)
           print "          grwkern(i) = %s " %fmt(de)
           print "          grgrwkern(i) = %s " %fmt(d2e)
       print "       endif"
    else:
       print w
    print "    enddo\n"

def m5(R):
    term1 = sympify((R-q)**4)
    term2 = -5*(sympify(3)/5*R - q)**4
    term3 = 10*(sympify(1)/5*R - q)**4
    f = Piecewise((term1 + term2 + term3,q < sympify(1)/5*R), (term1 + term2, q < sympify(3)/5*R), (term1, q < R), (0, q > R))
    return(f,'M5 quartic')

def m6(R):
    term1 = sympify((R-q)**5)
    term2 = -6*(sympify(2)/3*R - q)**5
    term3 = 15*(sympify(1)/3*R - q)**5
    f = Piecewise((term1 + term2 + term3,q < sympify(1)/3*R), (term1 + term2, q < sympify(2)/3*R), (term1, q < R), (0, q > R))
    return(f,'M6 quintic')

R = 2 #sympify(5)/2
f, name = m6(R)
#printkernel(f,R)
printkernel_ndspmhd(f,R,name)
