To compile SPLASH you will need the following on your system, both of which
are freely available:
- The PGPLOT graphics subroutine library
- A Fortran 95 compiler

The basic steps for installation are:
1) make sure you have a Fortran 90/95 compiler (such as g95).
2) make sure you have the PGPLOT libraries installed.
3) compile SPLASH and link with PGPLOT.
4) if desired/necessary write a read_data subroutine so that SPLASH can read
   your data format.
5) make pretty pictures.

For troubleshooting of some common installation problems,
 have a look at the online FAQ.

All of the above steps can be done "by hand" - to do so follow the detailed
instructions in the INSTALL file. However on Mac OS/X there are several tools
which make installation easier, so the steps are the following:

1) install Fink (preferably including the GUI fink commander) 
   if you haven't already (a simple download as a disk image file)

2) use Fink to install PGPLOT (either by typing "fink install pgplot" or using
   Fink commander) if pgplot does not appear in the package list, you may need
   to turn on "Use unstable packages" in the fink preferences. If you do not
   have g77/gfortran installing PGPLOT will trigger this install also (and maybe
   also the libpng libraries). Instructions for installing PGPLOT manually are
   given in the INSTALL file.

3) set the PGPLOT_DIR environment variable to the PGPLOT directory
   (e.g. for Fink, use setenv PGPLOT_DIR /sw/lib/pgplot).

   It is also a good idea at this stage to add the setting of PGPLOT_DIR into your 
   .profile/.bashrc or .tcshrc file along with a setting for PGPLOT_DEV (e.g. to "/xw"
   which sets the default device to be the X-windows device).

3) install g95 or gfortran (either by again using Fink or by simply downloading a binary from www.g95.org)

4) set the environment variable SYSTEM to 'mymac', e.g.
   export SYSTEM='mymac'

at this point, type 'make' and SPLASH should compile and link successfully.
Alternatively try the SYSTEM='intelmac' option for more recent MacBooks.
If you are unsuccessful at this point, refer to the more detailed instructions
in the INSTALL file.

You may at this point try using the ascii data read to read some of your files.
The next step is to read your own data format (see below).

4) -------------- reading your data format -------------------

The final step is to get SPLASH to read the dump files from your SPH code
directly. If you are using a widely used SPH code (e.g. GADGET, GASOLINE, VINE,
DRAGON), it is reasonably  likely that I have already written a read data
subroutine which will read your dumps. Alternatively, the ascii read ('asplash')
is quite general and will read any data where columns correspond to different
quantities and rows correspond to each particle (actually I use asplash to plot
graphs for nearly all data in this form, whether SPH or not) -- it will also
sensibly skip header lines which do not have the same number of columns.

However, it is ultimately desirable to use SPLASH to directly visualise the
output of your code If your format is not amongst those distributed, then BEFORE
you start writing your own routine, please consider whether or not a routine to read
your format would be of more general use (e.g. to other users of your code). If
so, PLEASE email me to request a new read_data routine for your format, by
sending an email attaching:
a) an example dump 
and 
b) the source code from the routine which wrote the dump file.

Then I can write a read for your format that can be added to the SPLASH repository
and distributed in all future versions. Whilst I aim never to change the interface
to the read_data routines, it is not impossible that some changes may occur
somewhere down the line (or enhanced functionality -- for example the more advanced
data reads are able to read only the required columns for a given plot from the
file, rather than the whole file).

If you *really* want to hack one yourself it is best to look at some of the
other examples and change the  necessary parts to suit your data files. Note
that reading directly from unformatted data files is *much* faster than reading
from formatted (ascii) output. Just to get started you can use the
read_data_ascii.f90 which reads from ascii files, but this will not enable the
full rendering capabilities until you specify the location of the density, h and
particle mass in the arrays (via the parameters ih, irho and ipmass in the
set_labels subroutine which is part of the read_data file). 

If you do end up writing your own, again, please email me the end result so I
can add it to the officially supported data reads. This also makes it much
easier for you to upgrade to newer versions as you do not require a locally
customised version.

5) ----- running splash/ making pretty pictures -----

In general it is a good idea to set:

limit stacksize unlimited

(csh), or in bash:

ulimit -s unlimited

before running splash.

For detailed help on how to use SPLASH, refer to the (quite extensive) userguide
in the /docs directory or on the splash web page.

Have fun! And remember, if you get stuck you can always email me... 
(it doesn't hurt).

Daniel Price
daniel.price@sci.monash.edu.au
