To compile SUPERSPHPLOT you will need the following on your system, both of which
are freely available:
- The PGPLOT graphics subroutine library
- A Fortran 95 compiler

The basic steps for installation are:
1) make sure you have a Fortran 90/95 compiler (such as g95)
2) make sure you have the PGPLOT libraries installed
3) compile SUPERSPHPLOT and link with PGPLOT
4) if desired/necessary write a read_data subroutine so that SUPERSPHPLOT can read your data format

For troubleshooting of some common installation problems,
 have a look at the online FAQ.

All of the above steps can be done "by hand" - to do so follow the detailed instructions in the INSTALL
file. However on Mac OS/X there are several tools which make installation easier, so the steps are the
following:

1) install Fink (preferably including the GUI fink commander) 
   if you haven't already (a simple download as a disk image file)

2) use fink to install PGPLOT (either by typing "fink install pgplot" or using Fink commander)
   if pgplot does not appear in the package list, you may need to turn on "Use unstable packages" in the
   fink preferences. If you do not have g77 installing PGPLOT will trigger this install also (and maybe also
   the libpng libraries) 

3) install g95 (either by again using fink or by simply downloading a binary from www.g95.org)

4) in the SUPERSPHPLOT Makefile, use

F90C = g95
F90FLAGS = -O3
LDFLAGS = -L/usr/X11R6/lib -lX11 -L/sw/lib/pgplot -lpgplot -lg2c -L/sw/lib -lpng \
          -laquaterm -lcc_dynamic -Wl,-framework -Wl,Foundation
(these flags should be identical to those in the PGPLOT makefile in the /sw/lib/pgplot directory,
 with the addition of -lg2c which links to the g77 libraries that fink uses to compile PGPLOT)
SYSTEMFILE = system_f2003.f90

at this point, type 'make' and supersphplot should compile and link successfully. You may at this point try
using the ascii data read to read some of your files. The next step is to read
your own data format (see below).

5) -------------- writing your data_read subroutine -------------------

If you are using a publically available code (e.g. GADGET), it is reasonably likely that I
have already written a read data subroutine which will read your dumps.
If not it is best to look at some of the other examples and change the 
necessary parts to suit your data files. Note that reading directly from
unformatted data files is *much* faster than reading from formatted (ascii)
output. Just to get started you can use the read_data_ascii.f90 which reads
from ascii files, but this will not enable the full rendering capabilities
until you specify the location of the density, h and particle mass in the
arrays (via the parameters ih, irho and ipmass in the set_labels subroutine
which is part of the read_data file). 

Perhaps the best way in a small community is simply to email me
a sample data file and the subroutine which writes it and I can easily modify a data read to your
particular format.


Have fun! And remember, if you get stuck you can always email me... (it doesn't hurt).

Daniel Price
dprice@astro.ex.ac.uk
